<html lang="en">
<head>
    <title>Main page</title>
    <style>
        table {
            border-collapse: collapse;
        }

        table, td, th {
            border: 1px solid #999;
            padding: 5px;
        }

        .table_sort table {
            border-collapse: collapse;
        }

        .table_sort th {
            color: #ffebcd;
            background: #008b8b;
            cursor: pointer;
        }

        .table_sort td,
        .table_sort th {
            padding: 5px;
            border: 2px solid #846868;
        }

        .table_sort tbody tr:nth-child(even) {
            background: #e3e3e3;
        }

        th.sorted[data-order="1"],
        th.sorted[data-order="-1"] {
            position: relative;
        }

        th.sorted[data-order="1"]::after,
        th.sorted[data-order="-1"]::after {
            right: 8px;
            position: absolute;
        }

        th.sorted[data-order="-1"]::after {
            content: "▼"
        }

        th.sorted[data-order="1"]::after {
            content: "▲"
        }
    </style>
</head>

<body>
<div>
    <strong style="font-size: larger;">Main</strong>
</div>

<div style="margin-top: 10px;">
    <form action="/logout" method="post">
        <input type="submit" value="Sign Out"/>
    </form>
</div>

<div>
    <strong style="font-size: large;" id="user"></strong>
</div>

<div id="userDiv">
    <div id="balance" style="margin-top: 10px;"></div>

    <div style="margin-top: 10px; display: none" id="addOperation">
        <label>
            <input type=text list=articles name="articles" id="articlesInput">
        </label>
        <datalist id=articles></datalist>
        <label>
            <input type="text" name="debit" id="operationDebit" placeholder="Enter debit">
        </label>
        <label>
            <input type="text" name="credit" id="operationCredit" placeholder="Enter credit">
        </label>
        <button type="submit" id="addingOperation">Add</button>
    </div>

    <div id="filter" style="margin-top: 10px; display: none">
        <label>
            <input type=text list=articles name="articles" id="filterArticle">
        </label>
        <datalist id=articles></datalist>
        <button type="submit" id="filtering">Find</button>
    </div>

    <div id="deleteAll" style="margin-top: 10px; display: none">
        <button type="submit" id="deletingAll">deleteAll</button>
    </div>

    <div>
        <table id="operations" style="margin-top: 10px; display: none" class="table_sort">
            <thead>
            <tr>
                <th style="white-space: pre-wrap">ID       </th>
                <th style="white-space: pre-wrap">Article Name       </th>
                <th style="white-space: pre-wrap">Debit       </th>
                <th style="white-space: pre-wrap">Credit       </th>
                <th style="white-space: pre-wrap">Create Date       </th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<div id="adminDiv" style="margin-top: 10px; display: none">
    <div style="margin-top: 10px; display: none;" id="addArticle">
        <label>
            <input type="text" id="articleToAdd" placeholder="Enter article">
        </label>
        <button type="submit" id="addingArticle">Add Article</button>
    </div>

    <div id="changeArticle" style="margin-top: 10px; display: none;">
        <label>
            <input type=text id="articleToChange" placeholder="Enter ID of Article">
        </label>
        <label>
            <input type="text" id="newArticleToChange" placeholder="Enter new Article name">
        </label>
        <button type="submit" id="changingArticle">Change Article</button>
    </div>

    <div style="margin-top: 10px; margin-bottom: 10px">
        <label>Table:
            <select id="adminTableName">
                <option value="articles">Articles</option>
                <option value="users">Users</option>
                <option value="operations">Operations</option>
            </select>
        </label>
    </div>

    <div>
        <table id="articlesForAdmin" style="display: none" class="table_sort">
            <thead>
            <tr>
                <th style="white-space: pre-wrap">ID       </th>
                <th style="white-space: pre-wrap">Article Name       </th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div>
        <table id="usersForAdmin" style="display: none" class="table_sort">
            <thead>
            <tr>
                <th style="white-space: pre-wrap">ID       </th>
                <th style="white-space: pre-wrap">Username       </th>
                <th style="white-space: pre-wrap">Balance ID       </th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div>
        <table id="operationsForAdmin" style="display: none" class="table_sort">
            <thead>
            <tr>
                <th style="white-space: pre-wrap">ID       </th>
                <th style="white-space: pre-wrap">Article Name       </th>
                <th style="white-space: pre-wrap">Debit       </th>
                <th style="white-space: pre-wrap">Credit       </th>
                <th style="white-space: pre-wrap">Create Date       </th>
                <th style="white-space: pre-wrap">Balance ID       </th>
            </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

<script>
    let xhr = new XMLHttpRequest();
    window.onload = function initTable() {
        let tableName = document.getElementById("adminTableName");
        let table = document.getElementById('operations');
        let balance = document.getElementById('balance');
        let user = document.getElementById('user');
        let articles = document.getElementById('articles');
        let adminDiv = document.getElementById('adminDiv');
        let userDiv = document.getElementById('userDiv');

        xhr.open('GET', '/api/me', false);
        xhr.send();
        let currentUser = JSON.parse(xhr.responseText);
        user.appendChild(document.createTextNode("User: " + currentUser.body.username));
        let isAdmin = (currentUser.body.roles[0] === "ADMIN");

        fetch('/api/articles', {
            method: 'get'
        })
                .then(res => res.json())
                .then(function (data) {
                    if (data.success === false) {
                        throw data.error;
                    }
                    console.log('Get articles request succeeded with JSON response', data);
                    for (let index = 0; index < data.body.length; index++) {
                        let toption = document.createElement("OPTION");
                        toption.appendChild(document.createTextNode(data.body[index].name));
                        articles.appendChild(toption);
                    }
                })
                .catch(function (error) {
                    console.log('Request failed', error);
                });
        if (isAdmin) {
            userDiv.remove();
            adminDiv.style.display = "block";
            document.getElementById("addArticle").style.display = 'block';
            document.getElementById("changeArticle").style.display = 'block';
            let articlesTable = document.getElementById("articlesForAdmin");
            let usersTable = document.getElementById("usersForAdmin");
            let operationsTable = document.getElementById("operationsForAdmin");
            tableName.addEventListener('change', function () {
                if (tableName.value === 'articles') {
                    operationsTable.style.display = 'none';
                    deleteTableBody(operationsTable);
                    usersTable.style.display = 'none';
                    deleteTableBody(usersTable);
                    fetch('/api/articles', {
                        method: 'get'
                    })
                            .then(res => res.json())
                            .then(function (data) {
                                if (data.success === false) {
                                    throw data.error;
                                }
                                console.log('Get articles for admin request succeeded with JSON response', data);
                                let tbody = articlesTable.getElementsByTagName("TBODY")[0];

                                for (let index = 0; index < data.body.length; index++) {
                                    let row = document.createElement("TR");
                                    let td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].id));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].name));
                                    row.appendChild(td);
                                    tbody.appendChild(row);
                                }
                                articlesTable.style.display = 'table';
                            })
                            .catch(function (error) {
                                articlesTable.style.display = 'none';
                                console.log('Request failed', error);
                            });
                }
                if (tableName.value === 'users') {
                    operationsTable.style.display = 'none';
                    deleteTableBody(operationsTable);
                    articlesTable.style.display = 'none';
                    deleteTableBody(articlesTable);
                    fetch('/api/users', {
                        method: 'get'
                    })
                            .then(res => res.json())
                            .then(function (data) {
                                if (data.success === false) {
                                    throw data.error;
                                }
                                console.log('Get users for admin request succeeded with JSON response', data);
                                let tbody = usersTable.getElementsByTagName("TBODY")[0];

                                for (let index = 0; index < data.body.length; index++) {
                                    if (data.body[index].roles[0] === "ADMIN") {
                                        continue;
                                    }
                                    let row = document.createElement("TR");
                                    let td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].id));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].username));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].balance.id));
                                    row.appendChild(td);
                                    tbody.appendChild(row);
                                }
                                console.log(tbody.childElementCount);
                                if (tbody.childElementCount > 0)
                                {
                                    usersTable.style.display = 'table';
                                }
                            })
                            .catch(function (error) {
                                usersTable.style.display = 'none';
                                console.log('Request failed', error);
                            });
                }
                if (tableName.value === 'operations') {
                    articlesTable.style.display = 'none';
                    deleteTableBody(articlesTable);
                    usersTable.style.display = 'none';
                    deleteTableBody(usersTable);
                    fetch('/api/operations', {
                        method: 'get'
                    })
                            .then(res => res.json())
                            .then(function (data) {
                                if (data.success === false) {
                                    throw data.error;
                                }
                                console.log('Get operations for admin request succeeded with JSON response', data);
                                let tbody = operationsTable.getElementsByTagName("TBODY")[0];

                                for (let index = 0; index < data.body.length; index++) {
                                    let row = document.createElement("TR");
                                    let td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].id));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].article.name));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].debit));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].credit));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].create_date));
                                    row.appendChild(td);
                                    td = document.createElement("TD");
                                    td.appendChild(document.createTextNode(data.body[index].balance.id));
                                    row.appendChild(td);
                                    tbody.appendChild(row);
                                }
                                operationsTable.style.display = 'table';
                            })
                            .catch(function (error) {
                                operationsTable.style.display = 'none';
                                console.log('Request failed', error);
                            });
                }
            });
            document.getElementById("addingArticle").onclick = function (e) {
                let article = document.getElementById("articleToAdd");
                if (article.value === '') {
                    alert("article field is empty")
                } else {
                    xhr.open("POST", "/api/articles?article=" + article.value, false);
                    xhr.send();
                    let res = JSON.parse(xhr.responseText);
                    if (res.success === false) {
                        alert(res.error);
                        e.preventDefault();
                    } else {
                        location.reload();
                    }
                }
            };
            document.getElementById("changingArticle").onclick = function (e) {
                let article = document.getElementById("articleToChange");
                let newArticle = document.getElementById("newArticleToChange");

                if (article.value === '' || newArticle.value === '') {
                    alert("articles fields is empty")
                } else {
                    xhr.open("PATCH", "/api/articles/" + article.value + "?article=" + newArticle.value, false);
                    xhr.send();
                    let res = JSON.parse(xhr.responseText);
                    if (res.success === false) {
                        alert(res.error);
                        e.preventDefault();
                    } else {
                        location.reload();
                    }
                }
            };
            fetch('/api/articles', {
                method: 'get'
            })
                    .then(res => res.json())
                    .then(function (data) {
                        if (data.success === false) {
                            throw data.error;
                        }
                        console.log('Get articles request succeeded with JSON response', data);
                        let articlesTable = document.getElementById("articlesForAdmin");
                        let tbody = deleteTableBody(articlesTable);

                        for (let index = 0; index < data.body.length; index++) {
                            let row = document.createElement("TR");
                            let id = document.createElement("TD");
                            let articleName = document.createElement("TD");
                            id.appendChild(document.createTextNode(data.body[index].id));
                            articleName.appendChild(document.createTextNode(data.body[index].name));
                            row.appendChild(id);
                            row.appendChild(articleName);
                            tbody.appendChild(row);
                        }
                        document.getElementById("articlesForAdmin").style.display = 'table';
                    })
                    .catch(function (error) {
                        console.log('Request failed', error);
                    });
        } else {
            adminDiv.remove();
            document.getElementById("deleteAll").style.display = 'block';
            document.getElementById("filter").style.display = 'block';
            document.getElementById("addOperation").style.display = 'block';
            document.getElementById("filtering").onclick = function (e) {
                let filter = document.getElementById("filterArticle");
                if (filter.value === "") {
                    resetTable(table);
                    return;
                }
                fetch('/api/balance/operations?article=' + filter.value, {
                    method: 'get'
                })
                        .then(res => res.json())
                        .then(function (data) {
                            if (data.success === false) {
                                throw data.error;
                            }
                            console.log('Get posts in filter request succeeded with JSON response', data);
                            setElementsToTable(table, data);
                            filter.value = "";
                        })
                        .catch(function (error) {
                            alert(error);
                            console.log('Request failed', error);
                            e.preventDefault();
                        });
            };
            document.getElementById("deletingAll").onclick = function () {
                xhr.open("DELETE", "/api/balance/operations", false);
                xhr.send();
                location.reload();
            };
            document.getElementById("addingOperation").onclick = function (e) {
                let oArticle = document.getElementById("articlesInput").value;
                let oDeb = document.getElementById("operationDebit").value;
                let oCred = document.getElementById("operationCredit").value;

                xhr.open("POST", "/api/balance/operations?article=" + oArticle + "&debit=" + oDeb + "&credit=" + oCred, false);
                xhr.send();
                let res = JSON.parse(xhr.responseText);
                if (res.success === false) {
                    alert(res.error);
                    e.preventDefault();
                } else {
                    location.reload()
                }
            };

            resetTable(table);

            fetch('/api/balance', {
                method: 'get'
            })
                    .then(res => res.json())
                    .then(function (data) {
                        if (data.success === false) {
                            throw data.error;
                        }
                        console.log('Get balance request succeeded with JSON response', data);

                        let div = document.createElement("DIV");
                        div.appendChild(document.createTextNode("Balance:"));
                        balance.appendChild(div);
                        div = document.createElement("DIV");
                        div.appendChild(document.createTextNode("Date: " + data.body.create_date));
                        balance.appendChild(div);
                        div = document.createElement("DIV");
                        div.appendChild(document.createTextNode("Debit: " + data.body.debit));
                        balance.appendChild(div);
                        div = document.createElement("DIV");
                        div.appendChild(document.createTextNode("Credit: " + data.body.credit));
                        balance.appendChild(div);
                        div = document.createElement("DIV");
                        div.appendChild(document.createTextNode("Amount: " + data.body.amount));
                        balance.appendChild(div);
                    })
                    .catch(function (error) {
                        console.log('Request failed', error);
                    });
        }
    };

    document.addEventListener('DOMContentLoaded', () => {

        const getSort = ({target}) => {
            const order = (target.dataset.order = -(target.dataset.order || -1));
            const index = [...target.parentNode.cells].indexOf(target);
            const collator = new Intl.Collator(['en', 'ru'], {numeric: true});
            const comparator = (index, order) => (a, b) => order * collator.compare(
                    a.children[index].innerHTML,
                    b.children[index].innerHTML
            );

            for (const tBody of target.closest('table').tBodies)
                tBody.append(...[...tBody.rows].sort(comparator(index, order)));

            for (const cell of target.parentNode.cells)
                cell.classList.toggle('sorted', cell === target);
        };

        document.querySelectorAll('.table_sort thead').forEach(tableTH => tableTH.addEventListener('click', () => getSort(event)));

    });

    function resetTable(table) {

        fetch('/api/balance/operations', {
            method: 'get'
        })
                .then(res => res.json())
                .then(function (data) {
                    if (data.success === false) {
                        throw data.error;
                    }
                    console.log('Get operations request succeeded with JSON response', data);
                    setElementsToTable(table, data);
                })
                .catch(function (error) {
                    table.style.display = 'none';
                    console.log('Request failed', error);
                });


    }

    function deleteTableBody(table) {
        let tbody = table.getElementsByTagName("TBODY")[0];
        while (tbody.firstChild) {
            tbody.firstChild.remove();
        }
        return tbody;
    }

    function setElementsToTable(table, req) {
        if (req == null) {
            return;
        }

        let tbody = deleteTableBody(table);

        for (let index = 0; index < req.body.length; index++) {
            let row = document.createElement("TR");
            let td = document.createElement("TD");
            td.appendChild(document.createTextNode(req.body[index].id));
            row.appendChild(td);
            td = document.createElement("TD");
            td.appendChild(document.createTextNode(req.body[index].article.name));
            row.appendChild(td);
            td = document.createElement("TD");
            td.appendChild(document.createTextNode(req.body[index].debit));
            row.appendChild(td);
            td = document.createElement("TD");
            td.appendChild(document.createTextNode(req.body[index].credit));
            row.appendChild(td);
            td = document.createElement("TD");
            td.appendChild(document.createTextNode(req.body[index].create_date));
            row.appendChild(td);
            let button = document.createElement("input");
            button.type = "submit";
            button.value = "delete";
            button.style.height = "40px";
            button.onclick = function () {
                let xhr = new XMLHttpRequest();
                xhr.open("DELETE", "/api/balance/operations/" + req.body[index].id, false);
                xhr.send();
                location.reload();
            };
            row.appendChild(button);
            row.style.height = "35px";
            button = document.createElement("input");
            button.type = "submit";
            button.value = "edit";
            button.style.height = "40px";
            button.onclick = function () {
                button.disabled = true;
                td = document.createElement("TD");
                let input = document.getElementById("articlesInput");
                let articlesInput = input.cloneNode(true);
                // articlesInput.id = "newArticleInput";
                articlesInput.value = "";
                articlesInput.style.height = "30px";
                td.appendChild(articlesInput);
                let debitInput = document.createElement("input");
                debitInput.type = "text";
                debitInput.placeholder = "Enter Debit";
                debitInput.style.height = "30px";
                td.appendChild(debitInput);
                let creditInput = debitInput.cloneNode(true);
                creditInput.placeholder = "Enter Credit";
                creditInput.style.height = "30px";
                td.appendChild(creditInput);
                let editButton = document.createElement("input");
                editButton.type = "submit";
                editButton.value = "editing";
                editButton.style.height = "30px";
                editButton.onclick = function () {
                    let xhr = new XMLHttpRequest();
                    xhr.open("PATCH", "/api/balance/operations/" + req.body[index].id + "?article=" + articlesInput.value + "&debit=" + debitInput.value + "&credit=" + creditInput.value, false);
                    xhr.send();
                    location.reload();
                };
                td.appendChild(editButton);
                row.appendChild(td);
            };
            row.appendChild(button);
            tbody.appendChild(row);
        }
        document.getElementById("operations").style.display = 'table';
    }

</script>
</body>
</html>